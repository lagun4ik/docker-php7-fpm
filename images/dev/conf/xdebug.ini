[xdebug]

; Normally you need to use a specific HTTP GET/POST variable to start remote
; debugging (see Remote Debugging). When this setting is set to 1, Xdebug will
; always attempt to start a remote debugging session and try to connect to a
; client, even if the GET/POST/COOKIE variable was not present.
xdebug.remote_autostart = ${PHP_XDEBUG_REMOTE_AUTOSTART}

; This switch controls whether Xdebug should try to contact a debug client which
; is listening on the host and port as set with the settings xdebug.remote_host
; and xdebug.remote_port. If a connection can not be established the script will
; just continue as if this setting was 0.
xdebug.remote_enable = ${PHP_XDEBUG_REMOTE_ENABLE}

; Can be either 'php3' which selects the old PHP 3 style debugger [1] output,
; 'gdb' which enables the GDB like debugger interface or 'dbgp' - the debugger
; protocol [2]. The DBGp protocol is the only supported protocol.
;
; [1] http://www.php.net/manual/en/debugger.php
; [2] http://xdebug.org/docs-dbgp.php
;
; **Note**: Xdebug 2.1 and later only support 'dbgp' as protocol.
xdebug.remote_handler = ${PHP_XDEBUG_REMOTE_HANDLER}

; Selects the host where the debug client is running, you can either use a host
; name or an IP address. This setting is ignored if xdebug.remote_connect_back
; is enabled.
xdebug.remote_host = ${PHP_XDEBUG_REMOTE_HOST}

; The port to which Xdebug tries to connect on the remote host. Port 9000 is the
; default for both the client and the bundled debugclient. As many clients use
; this port number, it is best to leave this setting unchanged.
xdebug.remote_port = ${PHP_XDEBUG_REMOTE_PORT}

; Selects when a debug connection is initiated. This setting can have two
; different values:
;
; req
;     Xdebug will try to connect to the debug client as soon as the script
;     starts.
;
; jit
;     Xdebug will only try to connect to the debug client as soon as an error
;     condition occurs.
xdebug.remote_mode = ${PHP_XDEBUG_REMOTE_MODE}

; Controls which IDE Key Xdebug should pass on to the DBGp debugger handler. The
; default is based on environment settings. First the environment setting
; DBGP_IDEKEY is consulted, then USER and as last USERNAME. The default is set
; to the first environment variable that is found. If none could be found the
; setting has as default ''. If this setting is set, it always overrides the
; environment variables.
xdebug.idekey = ${PHP_XDEBUG_IDEKEY}

;Type: integer, Default value: 0
;When this setting is set to 1, a single profiler file will be written for multiple requests. 
;One can surf to multiple pages or reload a page to get an average across all requests. 
;The file will be named .cachegrind.aggregate. You will need to move this file to get another round of aggregate data.
xdebug.profiler_aggregate = ${PHP_XDEBUG_PROFILER_AGGREGATE}

;Type: integer, Default value: 0
;When this setting is set to 1, profiler files will not be overwritten when a new 
;request would map to the same file (depending on the xdebug.profiler_output_name setting. 
;Instead the file will be appended to with the new profile.
xdebug.profiler_append = ${PHP_XDEBUG_PROFILER_APPEND}

;Type: integer, Default value: 0
;Enables Xdebug's profiler which creates files in the profile output directory. 
;Those files can be read by KCacheGrind to visualize your data. This setting can not be set 
;in your script with ini_set(). If you want to selectively enable the profiler, 
;please set xdebug.profiler_enable_trigger to 1 instead of using this setting.
xdebug.profiler_enable = ${PHP_XDEBUG_PROFILER_ENABLE}

;Type: integer, Default value: 0
;When this setting is set to 1, you can trigger the generation of profiler 
;files by using the XDEBUG_PROFILE GET/POST parameter, or set a cookie with the name XDEBUG_PROFILE. 
;This will then write the profiler data to defined directory. In order to prevent 
;the profiler to generate profile files for each request, you need to set xdebug.profiler_enable to 0. 
;Access to the trigger itself can be configured through xdebug.profiler_enable_trigger_value.
xdebug.profiler_enable_trigger = ${PHP_XDEBUG_PROFILER_ENABLE_TRIGGER}

;Type: string, Default value: "", Introduced in Xdebug >= 2.3
;This setting can be used to restrict who can make use of the XDEBUG_PROFILE functionality as 
;outlined in xdebug.profiler_enable_trigger. When changed from its default value of an empty string, 
;the value of the cookie, GET or POST argument needs to match the shared secret set with this 
;setting in order for the profiler to start.
xdebug.profiler_enable_trigger_value = ${PHP_XDEBUG_PROFILER_ENABLE_TRIGGER_VALUE}

;Type: string, Default value: /tmp
;The directory where the profiler output will be written to, make sure that the user who the 
;PHP will be running as has write permissions to that directory. 
;This setting can not be set in your script with ini_set().
xdebug.profiler_output_dir = ${PHP_XDEBUG_PROFILER_OUTPUT_DIR}

;Type: string, Default value: cachegrind.out.%p
;This setting determines the name of the file that is used to dump traces into. 
;The setting specifies the format with format specifiers, very similar to sprintf() and strftime(). 
;There are several format specifiers that can be used to format the file name.
xdebug.profiler_output_name = ${PHP_XDEBUG_PROFILER_OUTPUT_NAME}
